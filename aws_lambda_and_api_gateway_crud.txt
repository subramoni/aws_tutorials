Create a Rest API from Scratch with AWS API Gate way and lambda
---------------------------------------------------------------

youtube link : https://www.youtube.com/watch?v=Xsw2rXIHlUw&t=788s
Source code : https://github.com/ashuverma96/Serverless-API/blob/main/index.js

Step-1

-- Go to Dynamodb-->
----Create table-->
------Enter table name (testTable)
------Partion key (id) -- primary key
------Sort key - optional
------Default settings
------Create tags
------Click -> Create table button

Step-2

-- Go lambda function-->
----Create function-->
-------Basic information
---------Function name(demoapiuser)
---------Runtime(Nodejs)
---------Architecture
-------------Select x86_64
---------Permission
-------------Execution role-->
-----------------Create a new role from AWS policy templates-->
---------------------------Role name (demoapiuser)--create new role in IAM - Step 3
---------Click Create function button

Step-3

Click lambda function demoapiuser-->
------there is menu
	
	Code - Test - Monitor - Configuration - Aliass - Versions
					|
					Permission-->Execution role-->Role name(demoapiuser)

----------------if you click Role name, it will go to IAM menu
	-- Roles --> Permission -->Add permissions-->Attach policies
					-->AWSLambdaBasicExecutionRole
					-->AmazonDynamicDBFullAccess
					-->CloudWatchFullAccess
					
Step-4

1st page
-- Go to API Gateway-->
----Create API
----Select Rest API (public)
2nd page
----Choose the protocal-->
--------Select Rest API
----Create new API-->
--------Select New API
----In Settings-->
--------API name (demoapi)
--------Description ()
--------Endpoint Type (Regional)
----Click Create API
3rd page

under demoapi

----Resources
-------Actions --> Create Resource-->
----------------------New Child Resource-->
---------------------------Configure as proxy resource -- Click to OK
---------------------------Resource Name (user)
---------------------------Resource Path (/user)
---------------------------Enable API Gateway CORS -- Click to Ok
---------------------------Click Create Resouces button

under Resource (/user)

----Resources
-------Actions --> Create Method-->GET-->
			--Integration type (Lambda function)
			--Use Lambda Proxy integration -- Click to OK
			--Lambda Region (ap-south-1)
			--Lambda Function (demoapiuser)
			--Use Default Timeout -- Click to OK
			--Click Save button
Repeat above steps for POST method
Repeat above steps for DELETE method
Repeat above steps for PATCH method

Repeat above steps for creating Resource of Users
Repeat above steps for GET method

Step 5

AWS lambda function code
------------------------

const AWS = require('aws-sdk');
AWS.config.update( {
  region: 'ap-south-1'
});
const dynamodb = new AWS.DynamoDB.DocumentClient();
const dynamodbTableName = 'member_table';

const userPath = '/user';
const usersPath = '/users';

exports.handler = async function(event) {
  console.log('Request event: ', event);
  let response;
  switch(true) {
    
    case event.httpMethod === 'GET' && event.path === userPath:
      response = await getUser(event.queryStringParameters.MemberId);
      break;
    case event.httpMethod === 'GET' && event.path === usersPath:
      response = await getUsers();
      break;
    case event.httpMethod === 'POST' && event.path === userPath:
      response = await saveUser(JSON.parse(event.body));
      break;
    case event.httpMethod === 'PATCH' && event.path === userPath:
      const requestBody = JSON.parse(event.body);
      response = await modifyUser(requestBody.MemberId, requestBody.updateKey, requestBody.updateValue);
      break;
    case event.httpMethod === 'DELETE' && event.path === userPath:
      response = await deleteUser(JSON.parse(event.body).MemberId);
      break;
    default:
      response = buildResponse(404, '404 Not Found');
  }
  return response;
}

async function getUser(MemberId) {
  const params = {
    TableName: dynamodbTableName,
    Key: {
      'MemberId': MemberId
    }
  }
  return await dynamodb.get(params).promise().then((response) => {
    return buildResponse(200, response.Item);
  }, (error) => {
    console.error('Do your custom error handling here. I am just gonna log it: ', error);
  });
}

async function getUsers() {
  const params = {
    TableName: dynamodbTableName
  }
  const allUsers = await scanDynamoRecords(params, []);
  const body = {
    users: allUsers
  }
  return buildResponse(200, body);
}

async function scanDynamoRecords(scanParams, itemArray) {
  try {
    const dynamoData = await dynamodb.scan(scanParams).promise();
    itemArray = itemArray.concat(dynamoData.Items);
    if (dynamoData.LastEvaluatedKey) {
      scanParams.ExclusiveStartkey = dynamoData.LastEvaluatedKey;
      return await scanDynamoRecords(scanParams, itemArray);
    }
    return itemArray;
  } catch(error) {
    console.error('Do your custom error handling here. I am just gonna log it: ', error);
  }
}

async function saveUser(requestBody) {
  const params = {
    TableName: dynamodbTableName,
    Item: requestBody
  }
  return await dynamodb.put(params).promise().then(() => {
    const body = {
      Operation: 'SAVE',
      Message: 'SUCCESS',
      Item: requestBody
    }
    return buildResponse(200, body);
  }, (error) => {
    console.error('Do your custom error handling here. I am just gonna log it: ', error);
  })
}

async function modifyUser(MemberId, updateKey, updateValue) {
  const params = {
    TableName: dynamodbTableName,
    Key: {
      'MemberId': MemberId
    },
    UpdateExpression: `set ${updateKey} = :value`,
    ExpressionAttributeValues: {
      ':value': updateValue
    },
    ReturnValues: 'UPDATED_NEW'
  }
  return await dynamodb.update(params).promise().then((response) => {
    const body = {
      Operation: 'UPDATE',
      Message: 'SUCCESS',
      UpdatedAttributes: response
    }
    return buildResponse(200, body);
  }, (error) => {
    console.error('Do your custom error handling here. I am just gonna log it: ', error);
  })
}

async function deleteUser(MemberId) {
  const params = {
    TableName: dynamodbTableName,
    Key: {
      'MemberId': MemberId
    },
    ReturnValues: 'ALL_OLD'
  }
  return await dynamodb.delete(params).promise().then((response) => {
    const body = {
      Operation: 'DELETE',
      Message: 'SUCCESS',
      Item: response
    }
    return buildResponse(200, body);
  }, (error) => {
    console.error('Do your custom error handling here. I am just gonna log it: ', error);
  })
}

function buildResponse(statusCode, body) {
  return {
    statusCode: statusCode,
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  }
}


Step 6




